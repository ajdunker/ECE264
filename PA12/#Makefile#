
GCC = gcc
CFLAGS = -g -Wall -Wshadow
LIBS =
SOURCES = answer11.c pa11.c
TARGET = pa12

# -------------------------------------------------------------

test0: pa11
	./pa11 1 123456789AFBDE-C LLUUU
	valgrind --tool=memcheck --leak-check=full --verbose --log-file=outputs/valgrindlog0 ./pa11 1 123456789AFBDE-C LLUUU
test1: pa11
	./pa11 1 123456789AFBDE-C D
	valgrind --tool=memcheck --leak-check=full --verbose --log-file=outputs/valgrindlog1 ./pa11 1 123456789AFBDE-C D
test2: pa11
	./pa11 2 123-456789AFBDEC 2
	valgrind --tool=memcheck --leak-check=full --track-origins=yes --verbose --log-file=outputs/valgrindlog2 ./pa11 2 123-456789AFBDEC 2
test3: pa11
	./pa11 3 -23416785ABC9DEF
	valgrind --tool=memcheck --leak-check=full --verbose --log-file=outputs/valgrindlog3 ./pa11 3 -23416785ABC9DEF

.PHONY : all build clean environment help testall $(TESTS)
.DEFAULT_GOAL := build

OBJF = obj
OBJS = $(patsubst %.c,$(OBJF)/%.o,$(SOURCES))

-include $(SOURCES:%=$(OBJF)/%.P)

build: $(TARGET)

clean:
	@cd $(CURDIR)
	rm -rf $(TARGET) $(OBJF) outputs *.o

environment:
	@cd $(CURDIR)
	@mkdir -p outputs
	@mkdir -p $(OBJF)


$(TARGET): $(OBJS) | environment
	$(GCC) $(CFLAGS) $(OBJS) $(LIBS) -o $@

$(OBJF)/%.o: %.c | environment
	@$(GCC) -MM $(CFLAGS) $< | sed 's,^\([^ ]\),$(OBJF)\/\1,g' | sed '$$ s,$$, \\,' > $(OBJF)/$<.P
	$(GCC) $(CFLAGS) -c -o $@ $<

