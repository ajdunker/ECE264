
#include "pa10.h"
#include "tree.h"
#include "tree.c"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TRUE 1
#define FALSE 0

/**
 * Returns a pointer to a new empty stack.
 */
Stack * Stack_create()
{
  Stack * s = malloc(sizeof(Stack));
  return s;
}

/**
 * Frees all memory associated with the stack. 
 * Don't forget that you _must_ free the entire contained linked-list.
 * Also, you must safely to _nothing_ if stack == NULL. 
 */
void Stack_destroy(Stack * stack)
{
  if(stack != NULL)
    {
      while(stack -> list != NULL)
	{
	  ListNode * p = stack -> list -> next;
	  free(stack -> list);
	  stack -> list = p;
	}
      free(stack);
    }
}

/**
 * Returns TRUE (something other than zero) if the stack is empty.
 */
int Stack_isEmpty(Stack * stack)
{
  if(stack -> list == NULL)
    {
      return FALSE;
    }
  return TRUE;
}

/**
 * Pop the front 'value' from the stack.
 *
 * More precisely, this function must do two things:
 * (1) Return the value of the head node of the stack's list
 * (2) Remove the head node of the stack's list, freeing it.
 */
int Stack_pop(Stack * stack)
{
  if(stack -> list == NULL)
    {
      return -1;
    }
  int value = stack -> list -> value;
  ListNode * p = stack -> list -> next;
  free(stack -> list);
  stack -> list = p;
  return value;
}

/**
 * Push an 'value' onto the front of the stack.
 *
 * More precisely, this function must:
 * (1) Create a new ListNode with 'value' for it's value.
 * (2) Push that new ListNode onto the front of the stack's list.
 */
void Stack_push(Stack * stack, int value)
{
  ListNode * ln = malloc(sizeof(ListNode));
  ln -> value = value;
  ln -> next = stack -> list;
  stack -> list = ln;
}

/**
 * Sort 'array' of length 'len' using Donald Knuth's "StackSort"
 *
 * To do this, you must implement the following pseudo-code:
 * (1) Maintain a 'write_index'. This is where you'll write values to
 *     as you sort them. It starts off as zero.
 * (2) Initialize an empty stack
 * (3) For each input value 'x':
 *     (3.a) While the stack is nonempty and 'x' is larger than the 
 *           front 'value' on the stack, pop 'value' and:
 *           (3.a.i) Write 'value' to array[write_index], and 
 *                   increment write_index.
 *     (3.b) Push x onto the stack.
 * (4) While the stack is nonempty, pop the front 'value' and follow
 *     step (3.a.i).
 *
 * The output should be a sorted array if, and only if, the array
 * is stack-sortable. You can find files full of stack-sortable and
 * stack-unsortable arrays in the 'expected' folder.
 */
void stackSort(int * array, int len)
{
  Stack * st = Stack_create();
  int * outarr = malloc(sizeof(int) * len);
  int i,j,k = 0;
  for(i = 0; i < len; i++)
    {
      if(!Stack_isEmpty(st))
	{
	  if(st -> list -> value < array[i])
	    {
	      j = Stack_pop(st);
	      outarr[k++] = j;
	      while(!Stack_isEmpty(st))
		{
		  if(st -> list -> value < array[i])
		    {
		      j = Stack_pop(st);
		      outarr[k++] = j;
		    }
		  else
		    {
		      break;
		    }
		}
	      Stack_push(st, array[i]);
	    }
	  else if(st -> list -> value > array[i])
	    {
	      Stack_push(st, array[i]);
	    }
	}
      if(Stack_isEmpty(st))
	{
	  Stack_push(st, array[i]);
	}
    }
  while(!Stack_isEmpty(st))
    {
      j = Stack_pop(st);
      outarr[k++] = j;
    }
  for(i = 0; i < len; i++)
    {
      *(array+i) = *(outarr+i);
    }
  free(outarr);
  Stack_destroy(st);
}

/**
 * Return TRUE (1) if the 'array' of length 'len' is stack-sortable.
 *
 * To do this you must:
 * (1) If 'len' is less than 3, return TRUE.
 * (2) Find the maximum value in 'array'.
 * (3) Partition array into two parts: left of max, and right of max.
 * (4) The maximum value in left must be smaller than the minimum
 *     value in right. (Otherwise return FALSE.)
 * (5) Return TRUE if both left and right are stack-sortable.
 *
 * The 'expected' directory contains files for all sortable and 
 * unsortable sequences of length len. You must return TRUE for every
 * sequence in the sortable files, and you must return FALSE for every
 * sequence in the unsortable files.
 */
int getMax(int * array, int a, int b)
{
  int max = a;
  int i;
  for(i = a; i < b; i++)
    {
      if(array[max] < array[i])
	{
	  max = i;
	}
    }
  return max;
}
int getMin(int * array, int a, int b)
{
  int min = a;
  int i;
  for(i = a; i < b; i++)
    {
      if(array[min] > array[i])
	{
	  min = i;
	}
    }
  return min;
}
int isStackSortableHelp(int * array, int a, int b)
{
  
  int len = b - a + 1;
  //(1)
  if(len < 3)
    { 
      return TRUE;
    }
  //(2) getting the max
  int max = getMax(array, a, b);
  //(4) check if max of left is smaller then min of right
  if(getMax(array, a, max) > getMin(array, max, b))
    {
      return FALSE;
    }
  else
    {
      int left = isStackSortableHelp(array, a, max);
      int right = isStackSortableHelp(array, max, b);
      if(left && right == TRUE)
	{
	  return TRUE;
	}
    }
  return FALSE;
}
int isStackSortable(int * array, int len)
{
  //(1)
  if(len < 3)
    { 
      return TRUE;
    }
  return isStackSortableHelp(array, 0, len - 1);
}

/**
 * Generates (and prints) all the unique binary tree shapes of size k
 *
 * To do this, you must:
 * (1) Create an array with the elements [0..k-1] inclusive.
 * (2) Find all the permutations of this array.
 * (3) In the base-case of your permute function, you must test if the
 *     permutation is "stack-sortable"
 * (4) If the permutation is "stack-sortable", then build a binary
 *     tree, and print it using the "Tree_printShape(...)" function.
 *
 * Your genShapes() function must NOT produce duplicate tree shapes.
 * The correct outputs for sizes [1..9] are in the 'expected' 
 * directory.
 */
void swap(int * a , int * b)
{
  int x = * a ;
  * a = * b;
  * b = x;
}
void permute(int * array, int len, int ind)
{
  if (ind == len)
    {
      if(isStackSortable(array, len) == TRUE)
	{
	  TreeNode * tree = TreeNode_create(array[0]);
	  tree = Tree_build(array+1, len);
	  Tree_printShape(tree);
	  Tree_destroy(tree);
	}
    }
  int pos;
  for(pos = ind; pos < len; pos++)
    {
      swap(&array[pos], &array[ind]);
      permute(array, len, ind + 1);
    }
}
void genShapes(int k)
{
  int * array = malloc(sizeof(int) * k);
  int i;
  for(i = 0; i < k; i++)
    {
      array[i] = i;
    }
  permute(array, k, 0);
}




